What happens when you initialize a repository? Why do you need to do it?
Initializing a repository creates a .git directory contain a set of files which maintain all future interactions with files that are commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory is where version of the commit files are placed when checked out. They are the original source files which where committed. The staging area is a file in the .git directory which keeps track of files that are in an intermediate stage. They have been prepared to be commited but are awaiting other files that also need final changes done before all are commited together. The repository refers to the whole .git directory.

How can you use the staging area to make sure you have one commit per logical change?
The staging area allows for an intermediate location in to which files that have been modified are ready to be committed can be kept until all files in the project that need to be changed are completed. Afterwards a single commit can be done to archive all the changes as one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
If there is some creative idea that you would want to test out, a branch would allow for continued development on the mainstream project while allowing you play with your idea in parallel. Branches are also useful in that if the code in the branched version is found useful it can be integrated back into the main project.

How do the diagrams help you visualize the branch structure?
The diagrams create a treelike structure which helps to trace the point of branching off from the master. This seperation is useful to later attempt to merge parts of the structure. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The merge of two branches combines the changes and results in one master structure. The merge results in a history which is sequenced according to the date of the changes and so may interweave between both branches when doing a git log.  The representation in the diagram helps to clearly show the 2 diverging paths of updates on the documents and also helps to visualize what parts of the branch will get merged and what parts wont get merged.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros- Reduces the headache of plowing thru files eyeing for changes and then updating (which would also greatly increase the likelihood of introducing errors). Is quick.
Cons - May come across sections of differences which automatic merge is unable to complete.  In this case the user will have to manually complete the merging process.